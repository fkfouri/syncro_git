[tool.poetry]
name = "syncro-git"
version = "0.1.0"
description = ""
authors = ["fabio.kfouri <fabio.kfouri@ubirata.ai>"]
readme = "README.md"

#######################################################
# Dependencies
#######################################################
[tool.poetry.dependencies]
python = "^3.9"
gitpython = "^3.1.40"
click = "^8.1.7"
rich = "^13.7.0"

[tool.poetry.group.dev.dependencies]
taskipy = "^1.12.2"
ruff = "^0.1.6"
isort = "^5.12.0"
black = "^23.11.0"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


#######################################################
# LINTERS - RUFF | Isort | Black
#######################################################
[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F"]
ignore = []
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".temp*"
]
per-file-ignores = {}
# Same as Black.
line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Assume Python 3.9.
target-version = "py39"


[tool.isort]
include_trailing_comma = true
force_grid_wrap = 0
line_length = 120
profile = "black"
skip = [".temp-*", "venv", ".venv"]


[tool.black]
line-length = 120
target-version = ['py37', 'py38']
include = '\.pyi?$'
preview = true
extend-exclude='''
.temp-*
| venv
| .venv
'''

#######################################################
# Pytest & Coverage
#######################################################
[tool.pytest.ini_options]
addopts = "-s -p no:warnings"
log_cli = 1
log_cli_level = "INFO"
log_cli_format = "[pytest][%(asctime)s][%(levelname)s][%(module)s][%(funcName)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "INFO"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true


[tool.coverage.report]
exclude_lines = [
    "if self.debug:",
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
    "dbx_gen_prospector/common.py",
]

#######################################################
# Poetry Scripts & Taskipy
#######################################################
[tool.poetry.scripts]
syncro_git = "syncro_git.cli:syncro_git"


[tool.taskipy.tasks]
pre_lint = "echo 'Black + Isort \n' && black . && isort ."
lint = "echo 'RUFF \n' && ruff check . "

test = "coverage run -m pytest -s -x -v --junitxml='./.pytest_cache/test-result.xml'"
post_test = "coverage report -m && coverage html"


install = "poetry build"
post_install = "pipx install dist/syncro_git-0.1.0-py3-none-any.whl"

uninstall = "pipx uninstall syncro_git"